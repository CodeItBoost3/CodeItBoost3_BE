generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  role      Role     @default(USER)
  nickname  String
  password  String
  clientId  String   @unique @map("client_id")
  profileImageUrl String?  @map("profile_image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  posts     Post[]   @relation("UserPosts") 
  comments     Comment[]
  commentLikes CommentLike[]
}

model Post {
  postId       Int      @id @default(autoincrement()) 
  groupId      Int
  clientId       Int  
  nickname     String
  title        String
  content      String
  imageUrl     String
  location     String
  moment       DateTime
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now()) 
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  tag          Json


  user         User     @relation("UserPosts", fields: [clientId], references: [id], onDelete: Cascade)

  comments     Comment[]
  
}

model Comment {
  commentId Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  parentId  Int?
  nickname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likeCount Int      @default(0)

  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [postId], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  likes     CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  
  @@unique([userId, commentId])

}

enum Role {
  USER
  ADMIN
}