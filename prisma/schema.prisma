generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  role          Role          @default(USER)
  nickname      String
  password      String
  clientId      String        @unique
  createdAt     DateTime      @default(now()) @map("createdAt")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  joined_groups GroupMember[]
}

model Post {
  postId       Int      @id @default(autoincrement())
  groupId      Int
  userId       Int
  nickname     String
  title        String
  content      String
  imageUrl     String
  location     String
  moment       DateTime
  isPublic     Boolean
  createdAt    DateTime @default(now())
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  tag          Json

  group Group @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model Group {
  groupId          Int      @id @default(autoincrement())
  groupName        String   @unique
  groupPassword    String?
  groupDescription String?
  isPublic         Boolean  @default(true)
  createdAt        DateTime @default(now())
  imageUrl         String?
  badgeCount       Int      @default(0)

  members GroupMember[]
  posts   Post[]
  badges  Badge[]
}

model GroupMember {
  groupId  Int
  userId   Int
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
  group    Group     @relation(fields: [groupId], references: [groupId])
  user     User      @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
  @@index([userId], map: "GroupMember_userId_fkey")
}

enum GroupRole {
  MEMBER
  ADMIN
}

model Badge {
  badgeId       Int       @id @default(autoincrement())
  groupId       Int       @map("group_id")
  id            String    @unique @default(uuid()) @map("id")
  badgeName     String    @map("badge_name") @db.VarChar(32)
  badgeImageUrl String    @map("badge_image_url") @db.VarChar(255)
  badgeType     BadgeType @map("badge_type")
  createdAt     DateTime  @default(now()) @map("created_at")

  group Group @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@unique([groupId, badgeType])
  @@map("badge")
}

enum BadgeType {
  MEMORY_20
  GROUP_1YEAR
  LIKE_10000
}
